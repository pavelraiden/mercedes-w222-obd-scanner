version: '3.8'

services:
  # Main application
  mercedes-obd-scanner:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: mercedes-obd-scanner
    restart: unless-stopped
    ports:
      - "80:80"
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./ml/models:/app/ml/models
    environment:
      - ENVIRONMENT=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///app/data/obd_data.db
    depends_on:
      - redis
      - postgres
    networks:
      - mercedes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: mercedes-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mercedes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: mercedes-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mercedes_obd
      - POSTGRES_USER=mercedes
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mercedes_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mercedes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mercedes -d mercedes_obd"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mercedes-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mercedes-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mercedes-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - mercedes-network
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mercedes-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mercedes-network

  # Nginx reverse proxy (alternative to built-in nginx)
  nginx-proxy:
    image: nginx:alpine
    container_name: mercedes-nginx-proxy
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - mercedes-obd-scanner
    networks:
      - mercedes-network
    profiles:
      - ssl

  # Backup service
  backup:
    image: alpine:latest
    container_name: mercedes-backup
    restart: "no"
    volumes:
      - ./data:/backup/data:ro
      - ./logs:/backup/logs:ro
      - ./backups:/backups
    command: |
      sh -c "
        apk add --no-cache tar gzip &&
        tar -czf /backups/mercedes-obd-backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /backup .
      "
    networks:
      - mercedes-network
    profiles:
      - backup

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mercedes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
