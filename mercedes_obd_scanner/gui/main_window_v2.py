"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Mercedes OBD Scanner v2.0
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º GUI
"""
import customtkinter as ctk
import sys
import os
from typing import Optional

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from .theme_manager import theme_manager, ThemedFrame, ThemedButton
from .icon_manager import get_action_icon, icon_manager
from .app_controller import AppController
from .panels import ConnectionPanel, MonitoringPanel, PredictivePanel, TripHistoryPanel


class StatusBar(ThemedFrame):
    """–°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, parent, app_controller: AppController):
        super().__init__(parent)
        
        self.app_controller = app_controller
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.app_controller.add_observer('connection_status', self._on_status_update)
        self.app_controller.add_observer('error', self._on_error)
        
        self._create_widgets()
        self._create_layout()
        
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_label = ctk.CTkLabel(
            self,
            text="–û—Ç–∫–ª—é—á–µ–Ω–æ",
            text_color=theme_manager.get_color("text_secondary"),
            font=ctk.CTkFont(size=11)
        )
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.separator1 = ctk.CTkLabel(
            self,
            text="|",
            text_color=theme_manager.get_color("border"),
            font=ctk.CTkFont(size=11)
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        self.app_info_label = ctk.CTkLabel(
            self,
            text="Mercedes W222 OBD Scanner v2.0",
            text_color=theme_manager.get_color("text_secondary"),
            font=ctk.CTkFont(size=11)
        )
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.separator2 = ctk.CTkLabel(
            self,
            text="|",
            text_color=theme_manager.get_color("border"),
            font=ctk.CTkFont(size=11)
        )
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è/—Å—Ç–∞—Ç—É—Å
        self.time_label = ctk.CTkLabel(
            self,
            text="–ì–æ—Ç–æ–≤",
            text_color=theme_manager.get_color("text_secondary"),
            font=ctk.CTkFont(size=11)
        )
        
    def _create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å
        self.connection_label.pack(side="left", padx=(10, 5))
        self.separator1.pack(side="left", padx=5)
        self.app_info_label.pack(side="left", padx=5)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
        self.time_label.pack(side="right", padx=(5, 10))
        self.separator2.pack(side="right", padx=5)
        
    def _on_status_update(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        from .app_controller import ConnectionStatus
        
        status_text = {
            ConnectionStatus.DISCONNECTED: "–û—Ç–∫–ª—é—á–µ–Ω–æ",
            ConnectionStatus.CONNECTING: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
            ConnectionStatus.CONNECTED: "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
            ConnectionStatus.ERROR: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        }
        
        status_colors = {
            ConnectionStatus.DISCONNECTED: theme_manager.get_color("text_secondary"),
            ConnectionStatus.CONNECTING: theme_manager.get_color("warning"),
            ConnectionStatus.CONNECTED: theme_manager.get_color("success"),
            ConnectionStatus.ERROR: theme_manager.get_color("error")
        }
        
        text = status_text.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        color = status_colors.get(status, theme_manager.get_color("text_secondary"))
        
        self.connection_label.configure(text=text, text_color=color)
        
    def _on_error(self, error_message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.time_label.configure(
            text=f"–û—à–∏–±–∫–∞: {error_message[:50]}...",
            text_color=theme_manager.get_color("error")
        )
        
        # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        self.after(5000, lambda: self.time_label.configure(
            text="–ì–æ—Ç–æ–≤",
            text_color=theme_manager.get_color("text_secondary")
        ))


class MenuBar(ThemedFrame):
    """–ü–∞–Ω–µ–ª—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, parent, app_controller: AppController):
        super().__init__(parent)
        
        self.app_controller = app_controller
        
        self._create_widgets()
        self._create_layout()
        
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –º–µ–Ω—é"""
        # –õ–æ–≥–æ—Ç–∏–ø Mercedes
        from .icon_manager import icon_manager
        self.logo_label = ctk.CTkLabel(
            self,
            text="",
            image=icon_manager.create_mercedes_logo((32, 32))
        )
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.title_label = ctk.CTkLabel(
            self,
            text="Mercedes W222 OBD Scanner",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=theme_manager.get_color("text_primary")
        )
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        self.settings_button = ThemedButton(
            self,
            text="",
            image=get_action_icon("settings", (20, 20)),
            width=40,
            command=self._open_settings
        )
        
        self.help_button = ThemedButton(
            self,
            text="",
            image=get_action_icon("help", (20, 20)),
            width=40,
            command=self._open_help
        )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.theme_button = ThemedButton(
            self,
            text="–¢–µ–º–∞",
            width=60,
            command=self._toggle_theme
        )
        
    def _create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –º–µ–Ω—é"""
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.logo_label.pack(side="left", padx=(10, 5))
        self.title_label.pack(side="left", padx=5)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏
        self.theme_button.pack(side="right", padx=(5, 10))
        self.help_button.pack(side="right", padx=5)
        self.settings_button.pack(side="right", padx=5)
        
    def _open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
    def _open_help(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–∫–∏...")
        
    def _toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        current_themes = ["mercedes", "dark", "light"]
        current_index = current_themes.index(theme_manager.current_theme)
        next_index = (current_index + 1) % len(current_themes)
        next_theme = current_themes[next_index]
        
        theme_manager.set_theme(next_theme)


class MercedesOBDScannerV2:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Mercedes OBD Scanner v2.0"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CustomTkinter
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.apply_theme()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫
        icon_manager.preload_common_icons()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("Mercedes W222 OBD Scanner v2.0")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            pass
        except:
            pass
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.app_controller = AppController()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_interface()
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        theme_manager.add_observer(self)
        
    def _create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        
        # –ü–∞–Ω–µ–ª—å –º–µ–Ω—é
        self.menu_bar = MenuBar(self.root, self.app_controller)
        self.menu_bar.grid(row=0, column=0, sticky="ew", padx=5, pady=(5, 0))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabview = ctk.CTkTabview(self.root)
        self.tabview.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self._create_tabs()
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_bar = StatusBar(self.root, self.app_controller)
        self.status_bar.grid(row=2, column=0, sticky="ew", padx=5, pady=(0, 5))
        
    def _create_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_tab = self.tabview.add("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        self.connection_panel = ConnectionPanel(connection_tab, self.app_controller)
        self.connection_panel.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_tab = self.tabview.add("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.monitoring_panel = MonitoringPanel(monitoring_tab, self.app_controller)
        self.monitoring_panel.pack(fill="both", expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        predictive_tab = self.tabview.add("ü§ñ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        self.predictive_panel = PredictivePanel(predictive_tab, self.app_controller)
        self.predictive_panel.pack(fill="both", expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫
        history_tab = self.tabview.add("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫")
        self.trip_history_panel = TripHistoryPanel(history_tab, self.app_controller)
        self.trip_history_panel.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_tab = self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self._create_settings_tab(settings_tab)
        
    def _create_settings_tab(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ThemedFrame(parent)
        settings_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            settings_frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=theme_manager.get_color("text_primary")
        )
        title_label.pack(pady=(10, 20))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        theme_frame = ThemedFrame(settings_frame)
        theme_frame.pack(fill="x", padx=20, pady=10)
        
        theme_label = ctk.CTkLabel(
            theme_frame,
            text="–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:",
            font=ctk.CTkFont(size=14),
            text_color=theme_manager.get_color("text_primary")
        )
        theme_label.pack(side="left", padx=10, pady=10)
        
        self.theme_combo = ctk.CTkComboBox(
            theme_frame,
            values=theme_manager.get_theme_names(),
            command=self._on_theme_selected
        )
        self.theme_combo.set(theme_manager.get_current_theme_name())
        self.theme_combo.pack(side="right", padx=10, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_frame = ThemedFrame(settings_frame)
        update_frame.pack(fill="x", padx=20, pady=10)
        
        update_label = ctk.CTkLabel(
            update_frame,
            text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):",
            font=ctk.CTkFont(size=14),
            text_color=theme_manager.get_color("text_primary")
        )
        update_label.pack(side="left", padx=10, pady=10)
        
        self.update_slider = ctk.CTkSlider(
            update_frame,
            from_=0.1,
            to=2.0,
            number_of_steps=19,
            command=self._on_update_interval_changed
        )
        self.update_slider.set(0.5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5 —Å–µ–∫
        self.update_slider.pack(side="right", padx=10, pady=10)
        
    def _on_theme_selected(self, theme_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
        # –ù–∞–π—Ç–∏ –∫–ª—é—á —Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏
        for theme_key, theme_data in theme_manager.THEMES.items():
            if theme_data["name"] == theme_name:
                theme_manager.set_theme(theme_key)
                break
                
    def _on_update_interval_changed(self, value: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.app_controller.set_update_interval(value)
        
    def on_theme_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Ç–µ–º—ã
        if hasattr(self, 'theme_combo'):
            self.theme_combo.set(theme_manager.get_current_theme_name())
            
    def _on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            self.app_controller.shutdown()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
            theme_manager.save_settings()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        finally:
            self.root.destroy()
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self._on_closing()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = MercedesOBDScannerV2()
        app.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

