"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–∫–æ–Ω–æ–∫ –¥–ª—è Mercedes OBD Scanner
"""

import os
from PIL import Image, ImageDraw, ImageFont
import customtkinter as ctk
from typing import Dict, Optional, Tuple


class IconManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∞–º–∏"""

    def __init__(self):
        self.icons_cache = {}
        self.icons_dir = os.path.join(os.path.dirname(__file__), "icons")
        self.ensure_icons_dir()

    def ensure_icons_dir(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.icons_dir):
            os.makedirs(self.icons_dir)

    def create_system_icon(
        self, system_name: str, size: Tuple[int, int] = (24, 24), color: str = "#007AFF"
    ) -> ctk.CTkImage:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        cache_key = f"{system_name}_{size}_{color}"

        if cache_key in self.icons_cache:
            return self.icons_cache[cache_key]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.new("RGBA", size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        system_symbols = {
            "engine": "‚öô",
            "transmission": "‚ö°",
            "abs": "üõ°",
            "esp": "üîÑ",
            "airmatic": "üîß",
            "srs": "üõ°",
            "comand": "üì±",
            "climate": "‚ùÑ",
            "lighting": "üí°",
            "doors": "üö™",
            "windows": "ü™ü",
            "seats": "üí∫",
            "steering": "üéØ",
            "suspension": "üîß",
            "brakes": "üõë",
            "fuel": "‚õΩ",
            "exhaust": "üí®",
            "cooling": "‚ùÑ",
            "electrical": "‚ö°",
            "body": "üöó",
            "default": "‚öô",
        }

        symbol = system_symbols.get(system_name.lower(), system_symbols["default"])

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font_size = min(size) - 4
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.load_default()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞
        bbox = draw.textbbox((0, 0), symbol, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        x = (size[0] - text_width) // 2
        y = (size[1] - text_height) // 2

        # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
        draw.text((x, y), symbol, fill=color, font=font)

        # –°–æ–∑–¥–∞–Ω–∏–µ CTkImage
        ctk_image = ctk.CTkImage(light_image=img, dark_image=img, size=size)

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.icons_cache[cache_key] = ctk_image

        return ctk_image

    def create_status_icon(self, status: str, size: Tuple[int, int] = (16, 16)) -> ctk.CTkImage:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        cache_key = f"status_{status}_{size}"

        if cache_key in self.icons_cache:
            return self.icons_cache[cache_key]

        img = Image.new("RGBA", size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        status_colors = {
            "ok": "#34C759",
            "warning": "#FF9500",
            "error": "#FF3B30",
            "info": "#007AFF",
            "unknown": "#8E8E93",
        }

        color = status_colors.get(status, status_colors["unknown"])

        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–∞
        margin = 2
        draw.ellipse(
            [margin, margin, size[0] - margin, size[1] - margin], fill=color, outline=color
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä
        symbols = {"ok": "‚úì", "warning": "!", "error": "‚úó", "info": "i", "unknown": "?"}

        symbol = symbols.get(status, symbols["unknown"])

        try:
            font_size = min(size) // 2
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            font = ImageFont.load_default()

        bbox = draw.textbbox((0, 0), symbol, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        x = (size[0] - text_width) // 2
        y = (size[1] - text_height) // 2

        draw.text((x, y), symbol, fill="white", font=font)

        ctk_image = ctk.CTkImage(light_image=img, dark_image=img, size=size)
        self.icons_cache[cache_key] = ctk_image

        return ctk_image

    def create_action_icon(
        self, action: str, size: Tuple[int, int] = (20, 20), color: str = "#007AFF"
    ) -> ctk.CTkImage:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
        cache_key = f"action_{action}_{size}_{color}"

        if cache_key in self.icons_cache:
            return self.icons_cache[cache_key]

        img = Image.new("RGBA", size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)

        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        action_symbols = {
            "connect": "üîå",
            "disconnect": "üîå",
            "scan": "üîç",
            "clear": "üóë",
            "save": "üíæ",
            "load": "üìÅ",
            "export": "üì§",
            "import": "üì•",
            "settings": "‚öô",
            "help": "‚ùì",
            "refresh": "üîÑ",
            "play": "‚ñ∂",
            "pause": "‚è∏",
            "stop": "‚èπ",
            "record": "‚è∫",
        }

        symbol = action_symbols.get(action, "‚öô")

        try:
            font_size = min(size) - 4
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            font = ImageFont.load_default()

        bbox = draw.textbbox((0, 0), symbol, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        x = (size[0] - text_width) // 2
        y = (size[1] - text_height) // 2

        draw.text((x, y), symbol, fill=color, font=font)

        ctk_image = ctk.CTkImage(light_image=img, dark_image=img, size=size)
        self.icons_cache[cache_key] = ctk_image

        return ctk_image

    def create_mercedes_logo(self, size: Tuple[int, int] = (32, 32)) -> ctk.CTkImage:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ Mercedes-Benz"""
        cache_key = f"mercedes_logo_{size}"

        if cache_key in self.icons_cache:
            return self.icons_cache[cache_key]

        img = Image.new("RGBA", size, (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)

        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–∞
        center = (size[0] // 2, size[1] // 2)
        radius = min(size) // 2 - 2

        draw.ellipse(
            [center[0] - radius, center[1] - radius, center[0] + radius, center[1] + radius],
            outline="#C4C4C4",
            width=2,
        )

        # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ö–ª—É—á–µ–≤–æ–π –∑–≤–µ–∑–¥—ã
        import math

        star_radius = radius * 0.7
        angles = [0, 120, 240]  # –£–≥–ª—ã –¥–ª—è —Ç—Ä–µ—Ö –ª—É—á–µ–π

        for angle in angles:
            rad = math.radians(angle - 90)  # -90 –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤–≤–µ—Ä—Ö
            end_x = center[0] + star_radius * math.cos(rad)
            end_y = center[1] + star_radius * math.sin(rad)

            draw.line([center[0], center[1], end_x, end_y], fill="#C4C4C4", width=2)

        ctk_image = ctk.CTkImage(light_image=img, dark_image=img, size=size)
        self.icons_cache[cache_key] = ctk_image

        return ctk_image

    def get_system_icon(self, system_name: str, size: Tuple[int, int] = (24, 24)) -> ctk.CTkImage:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º"""
        from .theme_manager import theme_manager

        color = theme_manager.get_color("primary")
        return self.create_system_icon(system_name, size, color)

    def get_status_icon(self, status: str, size: Tuple[int, int] = (16, 16)) -> ctk.CTkImage:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        return self.create_status_icon(status, size)

    def get_action_icon(self, action: str, size: Tuple[int, int] = (20, 20)) -> ctk.CTkImage:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
        from .theme_manager import theme_manager

        color = theme_manager.get_color("primary")
        return self.create_action_icon(action, size, color)

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∫–æ–Ω–æ–∫"""
        self.icons_cache.clear()

    def preload_common_icons(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–∫–æ–Ω–æ–∫"""
        common_systems = ["engine", "transmission", "abs", "esp", "airmatic", "srs"]
        common_statuses = ["ok", "warning", "error", "info"]
        common_actions = ["connect", "scan", "clear", "save", "settings"]

        for system in common_systems:
            self.get_system_icon(system)

        for status in common_statuses:
            self.get_status_icon(status)

        for action in common_actions:
            self.get_action_icon(action)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∫–æ–Ω–æ–∫
icon_manager = IconManager()


def get_icon_manager() -> IconManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∫–æ–Ω–æ–∫"""
    return icon_manager


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_system_icon(system_name: str, size: Tuple[int, int] = (24, 24)) -> ctk.CTkImage:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return icon_manager.get_system_icon(system_name, size)


def get_status_icon(status: str, size: Tuple[int, int] = (16, 16)) -> ctk.CTkImage:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    return icon_manager.get_status_icon(status, size)


def get_action_icon(action: str, size: Tuple[int, int] = (20, 20)) -> ctk.CTkImage:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    return icon_manager.get_action_icon(action, size)
